// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v7/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_allora_network_allora_chain_math "github.com/allora-network/allora-chain/math"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// github release tag version
	MaxSerializedMsgLength int64                                           `protobuf:"varint,2,opt,name=max_serialized_msg_length,json=maxSerializedMsgLength,proto3" json:"max_serialized_msg_length,omitempty"`
	MinTopicWeight         github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,3,opt,name=min_topic_weight,json=minTopicWeight,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"min_topic_weight"`
	// solicatation or weight-adjustment
	RequiredMinimumStake   cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=required_minimum_stake,json=requiredMinimumStake,proto3,customtype=cosmossdk.io/math.Int" json:"required_minimum_stake"`
	RemoveStakeDelayWindow int64                 `protobuf:"varint,6,opt,name=remove_stake_delay_window,json=removeStakeDelayWindow,proto3" json:"remove_stake_delay_window,omitempty"`
	MinEpochLength         int64                 `protobuf:"varint,7,opt,name=min_epoch_length,json=minEpochLength,proto3" json:"min_epoch_length,omitempty"`
	// repeating inference request
	BetaEntropy          github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,opt,name=beta_entropy,json=betaEntropy,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"beta_entropy"`
	LearningRate         github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,9,opt,name=learning_rate,json=learningRate,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"learning_rate"`
	MaxGradientThreshold github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,10,opt,name=max_gradient_threshold,json=maxGradientThreshold,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"max_gradient_threshold"`
	MinStakeFraction     github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,11,opt,name=min_stake_fraction,json=minStakeFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"min_stake_fraction"`
	// coefficients
	MaxUnfulfilledWorkerRequests  uint64                                          `protobuf:"varint,13,opt,name=max_unfulfilled_worker_requests,json=maxUnfulfilledWorkerRequests,proto3" json:"max_unfulfilled_worker_requests,omitempty"`
	MaxUnfulfilledReputerRequests uint64                                          `protobuf:"varint,14,opt,name=max_unfulfilled_reputer_requests,json=maxUnfulfilledReputerRequests,proto3" json:"max_unfulfilled_reputer_requests,omitempty"`
	TopicRewardStakeImportance    github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,15,opt,name=topic_reward_stake_importance,json=topicRewardStakeImportance,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"topic_reward_stake_importance"`
	// topic and has a fiducial value of 0.5
	TopicRewardFeeRevenueImportance github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,16,opt,name=topic_reward_fee_revenue_importance,json=topicRewardFeeRevenueImportance,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"topic_reward_fee_revenue_importance"`
	// a topic and has a fiducial value of 0.5
	TopicRewardAlpha github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,17,opt,name=topic_reward_alpha,json=topicRewardAlpha,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"topic_reward_alpha"`
	// a monthly timescale, 0.5 for weekly updates
	TaskRewardAlpha github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,18,opt,name=task_reward_alpha,json=taskRewardAlpha,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"task_reward_alpha"`
	// to calculate ~U_ij, ~V_ik, ~W_im
	ValidatorsVsAlloraPercentReward github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,19,opt,name=validators_vs_allora_percent_reward,json=validatorsVsAlloraPercentReward,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"validators_vs_allora_percent_reward"`
	// to allora reputers workers etc
	MaxSamplesToScaleScores   uint64                `protobuf:"varint,20,opt,name=max_samples_to_scale_scores,json=maxSamplesToScaleScores,proto3" json:"max_samples_to_scale_scores,omitempty"`
	MaxTopInferersToReward    uint64                `protobuf:"varint,21,opt,name=max_top_inferers_to_reward,json=maxTopInferersToReward,proto3" json:"max_top_inferers_to_reward,omitempty"`
	MaxTopForecastersToReward uint64                `protobuf:"varint,22,opt,name=max_top_forecasters_to_reward,json=maxTopForecastersToReward,proto3" json:"max_top_forecasters_to_reward,omitempty"`
	MaxTopReputersToReward    uint64                `protobuf:"varint,23,opt,name=max_top_reputers_to_reward,json=maxTopReputersToReward,proto3" json:"max_top_reputers_to_reward,omitempty"`
	CreateTopicFee            cosmossdk_io_math.Int `protobuf:"bytes,24,opt,name=create_topic_fee,json=createTopicFee,proto3,customtype=cosmossdk.io/math.Int" json:"create_topic_fee"`
	GradientDescentMaxIters   uint64                `protobuf:"varint,25,opt,name=gradient_descent_max_iters,json=gradientDescentMaxIters,proto3" json:"gradient_descent_max_iters,omitempty"`
	RegistrationFee           cosmossdk_io_math.Int `protobuf:"bytes,28,opt,name=registration_fee,json=registrationFee,proto3,customtype=cosmossdk.io/math.Int" json:"registration_fee"`
	DefaultPageLimit          uint64                `protobuf:"varint,29,opt,name=default_page_limit,json=defaultPageLimit,proto3" json:"default_page_limit,omitempty"`
	MaxPageLimit              uint64                `protobuf:"varint,30,opt,name=max_page_limit,json=maxPageLimit,proto3" json:"max_page_limit,omitempty"`
	// min number of epochs to keep network losses, reputer losses, inferences,
	// forecasts
	MinEpochLengthRecordLimit int64 `protobuf:"varint,31,opt,name=min_epoch_length_record_limit,json=minEpochLengthRecordLimit,proto3" json:"min_epoch_length_record_limit,omitempty"`
	// block emission rate in number of blocks expected per month
	BlocksPerMonth   uint64                                          `protobuf:"varint,32,opt,name=blocks_per_month,json=blocksPerMonth,proto3" json:"blocks_per_month,omitempty"`
	PRewardInference github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,33,opt,name=p_reward_inference,json=pRewardInference,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"p_reward_inference"`
	PRewardForecast  github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,34,opt,name=p_reward_forecast,json=pRewardForecast,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"p_reward_forecast"`
	PRewardReputer   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,35,opt,name=p_reward_reputer,json=pRewardReputer,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"p_reward_reputer"`
	CRewardInference github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,36,opt,name=c_reward_inference,json=cRewardInference,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"c_reward_inference"`
	CRewardForecast  github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,37,opt,name=c_reward_forecast,json=cRewardForecast,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"c_reward_forecast"`
	CNorm            github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,38,opt,name=c_norm,json=cNorm,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"c_norm"`
	EpsilonReputer   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,40,opt,name=epsilon_reputer,json=epsilonReputer,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"epsilon_reputer"`
	// close proximities
	HalfMaxProcessStakeRemovalsEndBlock uint64 `protobuf:"varint,42,opt,name=half_max_process_stake_removals_end_block,json=halfMaxProcessStakeRemovalsEndBlock,proto3" json:"half_max_process_stake_removals_end_block,omitempty"`
	// Applied twice once for stakeRemovals and once for
	// DelegateStakeRemovals, so actual max is this number times two
	EpsilonSafeDiv github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,43,opt,name=epsilon_safe_div,json=epsilonSafeDiv,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"epsilon_safe_div"`
	/// a small tolerance quantity used to cap division by zero
	DataSendingFee cosmossdk_io_math.Int `protobuf:"bytes,44,opt,name=data_sending_fee,json=dataSendingFee,proto3,customtype=cosmossdk.io/math.Int" json:"data_sending_fee"`
	// payload sending fee for reputer or worker
	MaxElementsPerForecast  uint64                                          `protobuf:"varint,45,opt,name=max_elements_per_forecast,json=maxElementsPerForecast,proto3" json:"max_elements_per_forecast,omitempty"`
	MaxActiveTopicsPerBlock uint64                                          `protobuf:"varint,46,opt,name=max_active_topics_per_block,json=maxActiveTopicsPerBlock,proto3" json:"max_active_topics_per_block,omitempty"`
	MaxStringLength         uint64                                          `protobuf:"varint,47,opt,name=max_string_length,json=maxStringLength,proto3" json:"max_string_length,omitempty"`
	InitialRegretQuantile   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,48,opt,name=initial_regret_quantile,json=initialRegretQuantile,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"initial_regret_quantile"`
	PNormSafeDiv            github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,49,opt,name=p_norm_safe_div,json=pNormSafeDiv,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"p_norm_safe_div"`
	GlobalWhitelistEnabled  bool                                            `protobuf:"varint,50,opt,name=global_whitelist_enabled,json=globalWhitelistEnabled,proto3" json:"global_whitelist_enabled,omitempty"`
	// and participate in all topics as workers and reputers
	TopicCreatorWhitelistEnabled bool   `protobuf:"varint,51,opt,name=topic_creator_whitelist_enabled,json=topicCreatorWhitelistEnabled,proto3" json:"topic_creator_whitelist_enabled,omitempty"`
	MinExperiencedWorkerRegrets  uint64 `protobuf:"varint,52,opt,name=min_experienced_worker_regrets,json=minExperiencedWorkerRegrets,proto3" json:"min_experienced_worker_regrets,omitempty"`
	// for calculating the topic initial regret
	InferenceOutlierDetectionThreshold github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,53,opt,name=inference_outlier_detection_threshold,json=inferenceOutlierDetectionThreshold,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"inference_outlier_detection_threshold"`
	InferenceOutlierDetectionAlpha     github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,54,opt,name=inference_outlier_detection_alpha,json=inferenceOutlierDetectionAlpha,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"inference_outlier_detection_alpha"`
	LambdaInitialScore                 github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,55,opt,name=lambda_initial_score,json=lambdaInitialScore,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"lambda_initial_score"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c07ddd983414a3f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Params) GetMaxSerializedMsgLength() int64 {
	if m != nil {
		return m.MaxSerializedMsgLength
	}
	return 0
}

func (m *Params) GetRemoveStakeDelayWindow() int64 {
	if m != nil {
		return m.RemoveStakeDelayWindow
	}
	return 0
}

func (m *Params) GetMinEpochLength() int64 {
	if m != nil {
		return m.MinEpochLength
	}
	return 0
}

func (m *Params) GetMaxUnfulfilledWorkerRequests() uint64 {
	if m != nil {
		return m.MaxUnfulfilledWorkerRequests
	}
	return 0
}

func (m *Params) GetMaxUnfulfilledReputerRequests() uint64 {
	if m != nil {
		return m.MaxUnfulfilledReputerRequests
	}
	return 0
}

func (m *Params) GetMaxSamplesToScaleScores() uint64 {
	if m != nil {
		return m.MaxSamplesToScaleScores
	}
	return 0
}

func (m *Params) GetMaxTopInferersToReward() uint64 {
	if m != nil {
		return m.MaxTopInferersToReward
	}
	return 0
}

func (m *Params) GetMaxTopForecastersToReward() uint64 {
	if m != nil {
		return m.MaxTopForecastersToReward
	}
	return 0
}

func (m *Params) GetMaxTopReputersToReward() uint64 {
	if m != nil {
		return m.MaxTopReputersToReward
	}
	return 0
}

func (m *Params) GetGradientDescentMaxIters() uint64 {
	if m != nil {
		return m.GradientDescentMaxIters
	}
	return 0
}

func (m *Params) GetDefaultPageLimit() uint64 {
	if m != nil {
		return m.DefaultPageLimit
	}
	return 0
}

func (m *Params) GetMaxPageLimit() uint64 {
	if m != nil {
		return m.MaxPageLimit
	}
	return 0
}

func (m *Params) GetMinEpochLengthRecordLimit() int64 {
	if m != nil {
		return m.MinEpochLengthRecordLimit
	}
	return 0
}

func (m *Params) GetBlocksPerMonth() uint64 {
	if m != nil {
		return m.BlocksPerMonth
	}
	return 0
}

func (m *Params) GetHalfMaxProcessStakeRemovalsEndBlock() uint64 {
	if m != nil {
		return m.HalfMaxProcessStakeRemovalsEndBlock
	}
	return 0
}

func (m *Params) GetMaxElementsPerForecast() uint64 {
	if m != nil {
		return m.MaxElementsPerForecast
	}
	return 0
}

func (m *Params) GetMaxActiveTopicsPerBlock() uint64 {
	if m != nil {
		return m.MaxActiveTopicsPerBlock
	}
	return 0
}

func (m *Params) GetMaxStringLength() uint64 {
	if m != nil {
		return m.MaxStringLength
	}
	return 0
}

func (m *Params) GetGlobalWhitelistEnabled() bool {
	if m != nil {
		return m.GlobalWhitelistEnabled
	}
	return false
}

func (m *Params) GetTopicCreatorWhitelistEnabled() bool {
	if m != nil {
		return m.TopicCreatorWhitelistEnabled
	}
	return false
}

func (m *Params) GetMinExperiencedWorkerRegrets() uint64 {
	if m != nil {
		return m.MinExperiencedWorkerRegrets
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "emissions.v7.Params")
}

func init() { proto.RegisterFile("emissions/v7/params.proto", fileDescriptor_8c07ddd983414a3f) }

var fileDescriptor_8c07ddd983414a3f = []byte{
	// 1547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4d, 0x6f, 0x14, 0x47,
	0x13, 0xf6, 0xbe, 0x18, 0x63, 0x1a, 0x63, 0xaf, 0xe7, 0x35, 0x66, 0xfc, 0xb5, 0x36, 0x18, 0x92,
	0xc5, 0x01, 0x2f, 0x09, 0x49, 0x4c, 0x3e, 0x0e, 0x01, 0x6c, 0x23, 0x5b, 0x98, 0x38, 0x63, 0x07,
	0x4b, 0x24, 0x4a, 0xa7, 0x3d, 0x53, 0xbb, 0xdb, 0xf2, 0x4c, 0xf7, 0xd0, 0xdd, 0xbb, 0x5e, 0x73,
	0x8c, 0x94, 0x4b, 0x4e, 0xf9, 0x19, 0x39, 0xe6, 0x90, 0x1f, 0xc1, 0x11, 0xe5, 0x14, 0xe5, 0x80,
	0x22, 0x38, 0x44, 0xca, 0xaf, 0x88, 0xfa, 0x63, 0x66, 0x77, 0x31, 0x41, 0x11, 0x93, 0x8b, 0xe5,
	0x99, 0xae, 0x7a, 0x9e, 0x9a, 0xa7, 0xab, 0xab, 0xaa, 0x17, 0x4d, 0x41, 0x42, 0xa5, 0xa4, 0x9c,
	0xc9, 0x5a, 0x7b, 0xa5, 0x96, 0x12, 0x41, 0x12, 0xb9, 0x9c, 0x0a, 0xae, 0xb8, 0x37, 0x92, 0x2f,
	0x2d, 0xb7, 0x57, 0xa6, 0xc7, 0x49, 0x42, 0x19, 0xaf, 0x99, 0xbf, 0xd6, 0x60, 0x7a, 0x2a, 0xe4,
	0x32, 0xe1, 0x12, 0x9b, 0xa7, 0x9a, 0x7d, 0x70, 0x4b, 0x13, 0x0d, 0xde, 0xe0, 0xf6, 0xbd, 0xfe,
	0xcf, 0xbe, 0xbd, 0xf8, 0xd7, 0x05, 0x34, 0xb4, 0x6d, 0x28, 0x3c, 0x1f, 0x9d, 0x6a, 0x83, 0xd0,
	0xe8, 0x7e, 0x69, 0xa1, 0x54, 0x3d, 0x1d, 0x64, 0x8f, 0xde, 0x47, 0x68, 0x2a, 0x21, 0x1d, 0x2c,
	0x41, 0x50, 0x12, 0xd3, 0xc7, 0x10, 0xe1, 0x44, 0x36, 0x70, 0x0c, 0xac, 0xa1, 0x9a, 0xfe, 0xff,
	0x16, 0x4a, 0xd5, 0x13, 0xc1, 0x64, 0x42, 0x3a, 0x3b, 0xf9, 0xfa, 0x96, 0x6c, 0xdc, 0x33, 0xab,
	0x1e, 0x41, 0xe5, 0x84, 0x32, 0xac, 0x78, 0x4a, 0x43, 0x7c, 0x08, 0xb4, 0xd1, 0x54, 0xfe, 0x09,
	0x8d, 0x7e, 0x7b, 0xe5, 0xc9, 0xb3, 0xf9, 0x81, 0xdf, 0x9f, 0xcd, 0xd7, 0x1a, 0x54, 0x35, 0x5b,
	0xfb, 0xcb, 0x21, 0x4f, 0x6a, 0x24, 0x8e, 0xb9, 0x20, 0xd7, 0x18, 0xa8, 0x43, 0x2e, 0x0e, 0xb2,
	0xc7, 0xb0, 0x49, 0x28, 0xab, 0x25, 0x44, 0x35, 0x97, 0x57, 0x21, 0x0c, 0x46, 0x13, 0xca, 0x76,
	0x35, 0xde, 0x9e, 0x81, 0xf3, 0xea, 0x68, 0x52, 0xc0, 0xa3, 0x16, 0x15, 0x3a, 0x2e, 0xca, 0x68,
	0xd2, 0x4a, 0xb0, 0x54, 0xe4, 0x00, 0xfc, 0x93, 0x86, 0xe8, 0xba, 0x23, 0x3a, 0x67, 0xe5, 0x90,
	0xd1, 0xc1, 0x32, 0xe5, 0x16, 0x6e, 0x83, 0xa9, 0x5f, 0x7f, 0xb9, 0x86, 0x9c, 0x4e, 0x1b, 0x4c,
	0xfd, 0xf4, 0xe7, 0xcf, 0x4b, 0xa5, 0x60, 0x22, 0xc3, 0xdb, 0xb2, 0x70, 0x3b, 0x1a, 0x4d, 0xab,
	0x20, 0x20, 0xe1, 0x6d, 0xb0, 0xe8, 0x38, 0x82, 0x98, 0x1c, 0xe1, 0x43, 0xca, 0x22, 0x7e, 0xe8,
	0x0f, 0x59, 0x15, 0xac, 0x81, 0xb1, 0x5f, 0xd5, 0xcb, 0x7b, 0x66, 0xd5, 0xab, 0x5a, 0x15, 0x20,
	0xe5, 0x61, 0x33, 0xd3, 0xed, 0x94, 0xf1, 0xd0, 0x1f, 0xb3, 0xa6, 0x5f, 0x3b, 0xbd, 0x1e, 0xa2,
	0x91, 0x7d, 0x50, 0x04, 0x03, 0x53, 0x82, 0xa7, 0x47, 0xfe, 0x70, 0x31, 0xad, 0xce, 0x68, 0xb0,
	0x35, 0x8b, 0xe5, 0x7d, 0x8d, 0xce, 0xc6, 0x40, 0x04, 0xa3, 0xac, 0x81, 0x05, 0x51, 0xe0, 0x9f,
	0x2e, 0x06, 0x3e, 0x92, 0xa1, 0x05, 0x44, 0x81, 0x97, 0x20, 0x9d, 0x03, 0xb8, 0x21, 0x48, 0x44,
	0x81, 0x29, 0xac, 0x9a, 0x02, 0x64, 0x93, 0xc7, 0x91, 0x8f, 0x8a, 0xd1, 0x4c, 0x24, 0xa4, 0x73,
	0xd7, 0xa1, 0xee, 0x66, 0xa0, 0x1e, 0x20, 0x4f, 0x4b, 0x6a, 0xb7, 0xa2, 0x2e, 0x48, 0xa8, 0x74,
	0xe2, 0x9e, 0x29, 0x46, 0xa5, 0x77, 0xc9, 0x6c, 0xde, 0xba, 0x03, 0xf4, 0xd6, 0xd0, 0xbc, 0xfe,
	0xaa, 0x16, 0xab, 0xb7, 0xe2, 0x3a, 0x8d, 0x63, 0x88, 0xb0, 0xf6, 0x07, 0x81, 0x75, 0x8e, 0x80,
	0x54, 0xd2, 0x3f, 0xbb, 0x50, 0xaa, 0x0e, 0x06, 0xb3, 0x09, 0xe9, 0x7c, 0xd9, 0xb5, 0xda, 0x33,
	0x46, 0x81, 0xb3, 0xf1, 0xee, 0xa2, 0x85, 0x97, 0x61, 0x04, 0xa4, 0x2d, 0xd5, 0x8b, 0x33, 0x6a,
	0x70, 0xe6, 0xfa, 0x71, 0x02, 0x6b, 0x95, 0x03, 0x3d, 0x46, 0x73, 0xf6, 0x2c, 0x09, 0x38, 0x24,
	0x22, 0x72, 0xdf, 0x4f, 0x93, 0x94, 0x0b, 0x45, 0x58, 0x08, 0xfe, 0x58, 0x31, 0x05, 0xa6, 0x0d,
	0x7a, 0x60, 0xc0, 0x8d, 0x12, 0x1b, 0x39, 0xb4, 0xf7, 0x7d, 0x09, 0x2d, 0xf6, 0x91, 0xd7, 0x01,
	0xb0, 0x80, 0x36, 0xb0, 0x56, 0x5f, 0x08, 0xe5, 0x62, 0x21, 0xcc, 0xf7, 0x84, 0xb0, 0x0e, 0x10,
	0x58, 0x82, 0x9e, 0x38, 0x00, 0x79, 0x7d, 0x61, 0x90, 0x38, 0x6d, 0x12, 0x7f, 0xbc, 0xe0, 0xd6,
	0xf7, 0xb0, 0xde, 0xd2, 0x80, 0x5e, 0x88, 0xc6, 0x15, 0x91, 0x07, 0xfd, 0x2c, 0x5e, 0x31, 0x96,
	0x31, 0x8d, 0xd8, 0x4b, 0xa2, 0x35, 0x6d, 0x93, 0x98, 0x46, 0x44, 0x71, 0x21, 0x71, 0x5b, 0x62,
	0xeb, 0x88, 0x53, 0x10, 0xa1, 0x3e, 0x46, 0x96, 0xdd, 0xff, 0x7f, 0x41, 0x4d, 0xbb, 0x1c, 0x0f,
	0xe4, 0x2d, 0x63, 0xb2, 0x6d, 0x09, 0x6c, 0x30, 0xde, 0xa7, 0x68, 0xc6, 0x94, 0x78, 0x92, 0xa4,
	0x31, 0x48, 0xac, 0x38, 0x96, 0x21, 0x89, 0x01, 0xcb, 0x90, 0x0b, 0x90, 0xfe, 0x84, 0xc9, 0xcd,
	0xf3, 0xba, 0xc8, 0x5b, 0x8b, 0x5d, 0xbe, 0xa3, 0xd7, 0x77, 0xcc, 0xb2, 0xf7, 0x31, 0x9a, 0xd6,
	0xde, 0x8a, 0xa7, 0x98, 0xb2, 0x3a, 0x08, 0x10, 0x06, 0xc2, 0xc5, 0x7e, 0xce, 0x38, 0xeb, 0xea,
	0xb0, 0xcb, 0xd3, 0x0d, 0xb7, 0xbe, 0xcb, 0x1d, 0xf3, 0x67, 0x68, 0x2e, 0xf3, 0xad, 0x73, 0x01,
	0x21, 0x91, 0xaa, 0xdf, 0x7d, 0xd2, 0xb8, 0x4f, 0x59, 0xf7, 0xf5, 0xae, 0x49, 0x8e, 0xd0, 0xc3,
	0xee, 0x0e, 0x55, 0xaf, 0xfb, 0xf9, 0x5e, 0x76, 0x77, 0x9c, 0xba, 0xbe, 0x0f, 0x51, 0x39, 0x14,
	0x40, 0x14, 0xb8, 0x16, 0x55, 0x07, 0xf0, 0xfd, 0x37, 0x6c, 0x1b, 0xa3, 0x16, 0xc9, 0xf4, 0xa6,
	0x75, 0x00, 0xef, 0x13, 0x34, 0x9d, 0x57, 0xc3, 0x08, 0xa4, 0xd9, 0x4e, 0x1d, 0x28, 0xd5, 0x11,
	0xf8, 0x53, 0x56, 0xd2, 0xcc, 0x62, 0xd5, 0x1a, 0x6c, 0x91, 0xce, 0x86, 0x5e, 0xf6, 0xbe, 0x42,
	0x65, 0x01, 0x0d, 0x2a, 0x95, 0x20, 0xba, 0x10, 0x99, 0xc0, 0x66, 0xdf, 0x30, 0xb0, 0xb1, 0x5e,
	0x24, 0x1d, 0xd9, 0x55, 0xe4, 0x45, 0x50, 0x27, 0xad, 0x58, 0xe1, 0x94, 0x34, 0x00, 0xc7, 0x34,
	0xa1, 0xca, 0x9f, 0x33, 0x11, 0x95, 0xdd, 0xca, 0x36, 0x69, 0xc0, 0x3d, 0xfd, 0xde, 0xbb, 0x84,
	0x46, 0x75, 0xd8, 0x3d, 0x96, 0x15, 0x63, 0x39, 0x92, 0x90, 0x4e, 0xd7, 0x4a, 0xef, 0xe3, 0x4b,
	0x3d, 0x0e, 0x0b, 0x08, 0xb9, 0x88, 0x9c, 0xd3, 0xbc, 0x69, 0x78, 0x53, 0xfd, 0x0d, 0x2f, 0x30,
	0x16, 0x16, 0xa1, 0x8a, 0xca, 0xfb, 0x31, 0x0f, 0x0f, 0xa4, 0x4e, 0x7e, 0x9c, 0x70, 0xa6, 0x9a,
	0xfe, 0x82, 0x61, 0x1a, 0xb5, 0xef, 0xb7, 0x41, 0x6c, 0xe9, 0xb7, 0xba, 0x02, 0xa4, 0xd9, 0xb9,
	0xb4, 0x09, 0xa7, 0xeb, 0xce, 0x85, 0x82, 0x15, 0x20, 0xb5, 0x39, 0xb1, 0x91, 0x01, 0xea, 0x0a,
	0x90, 0xd3, 0x64, 0xb9, 0xe9, 0x5f, 0x2c, 0x58, 0x01, 0x1c, 0x4b, 0x96, 0xc8, 0x7a, 0x42, 0xca,
	0x49, 0x5c, 0xfa, 0xfa, 0x8b, 0x05, 0x27, 0x24, 0xc7, 0xe1, 0xb2, 0x5d, 0xcb, 0x15, 0x1e, 0x97,
	0xeb, 0x52, 0x41, 0xb9, 0xc2, 0x57, 0xc8, 0x15, 0x1e, 0x93, 0xeb, 0x72, 0x41, 0xb9, 0xc2, 0x97,
	0xe4, 0xba, 0x8f, 0x86, 0x42, 0xcc, 0xb8, 0x48, 0xfc, 0xb7, 0x8a, 0x21, 0x9f, 0x0c, 0xef, 0x73,
	0x91, 0x78, 0xdf, 0xa2, 0x31, 0x48, 0x25, 0x8d, 0x39, 0xcb, 0xd5, 0xaf, 0x16, 0x54, 0xdf, 0xe1,
	0x65, 0xea, 0x3f, 0x40, 0x57, 0x9a, 0x24, 0xae, 0x9b, 0xa3, 0x9f, 0x0a, 0x1e, 0x82, 0x94, 0xae,
	0x6d, 0x9b, 0x69, 0x91, 0xc4, 0x12, 0x03, 0x8b, 0xb0, 0x49, 0x71, 0x7f, 0xc9, 0xe4, 0xfb, 0xa2,
	0x76, 0xd8, 0x22, 0x9d, 0x6d, 0x6b, 0x6e, 0x1a, 0x71, 0xe0, 0x8c, 0xd7, 0x58, 0x74, 0x5b, 0x9b,
	0xea, 0xc4, 0xc9, 0x22, 0x97, 0xa4, 0x0e, 0x38, 0xa2, 0x6d, 0xff, 0x9d, 0xff, 0x26, 0xf4, 0x1d,
	0x52, 0x87, 0x55, 0xda, 0xd6, 0xd5, 0x31, 0x22, 0x8a, 0x60, 0x09, 0x2c, 0xd2, 0x53, 0xa3, 0x2e,
	0x42, 0x57, 0xdf, 0xb4, 0x3a, 0x6a, 0xa4, 0x1d, 0x0b, 0xa4, 0x6b, 0x90, 0xbb, 0x54, 0x40, 0x0c,
	0x09, 0x30, 0x65, 0xcf, 0x7c, 0x9e, 0x35, 0xd7, 0xf2, 0xa2, 0xbd, 0xe6, 0xd6, 0xb7, 0x41, 0xe4,
	0x39, 0xe0, 0x9a, 0x95, 0x1e, 0xd1, 0xda, 0xae, 0x70, 0x5b, 0x7f, 0xab, 0xe1, 0x72, 0xde, 0xac,
	0x6e, 0x19, 0x0b, 0x53, 0x90, 0x35, 0x80, 0xd5, 0x6d, 0x09, 0x8d, 0x9b, 0x56, 0xa7, 0x84, 0xfe,
	0x24, 0x37, 0x8d, 0xd7, 0x8c, 0xcf, 0x98, 0x6e, 0x70, 0xe6, 0xbd, 0x1b, 0xc7, 0x39, 0x3a, 0x4f,
	0x19, 0x55, 0x94, 0xc4, 0x58, 0x40, 0x43, 0x80, 0xc2, 0x8f, 0x5a, 0x84, 0x29, 0x1a, 0x83, 0x7f,
	0xbd, 0x98, 0xd4, 0xe7, 0x1c, 0x6e, 0x60, 0x60, 0xbf, 0x70, 0xa8, 0xde, 0x37, 0x68, 0x2c, 0x35,
	0xe9, 0xdd, 0xdd, 0xd3, 0x77, 0x0b, 0x4e, 0xe9, 0xa9, 0xce, 0xf3, 0x6c, 0x47, 0x6f, 0x22, 0xbf,
	0x11, 0xf3, 0x7d, 0x12, 0xe3, 0xc3, 0x26, 0x55, 0x10, 0x53, 0xa9, 0x30, 0x30, 0xb2, 0x1f, 0x43,
	0xe4, 0xbf, 0xb7, 0x50, 0xaa, 0x0e, 0x07, 0x93, 0x76, 0x7d, 0x2f, 0x5b, 0x5e, 0xb3, 0xab, 0x7a,
	0x12, 0xb6, 0x2d, 0xd2, 0x74, 0x39, 0x2e, 0x5e, 0x01, 0x70, 0xc3, 0x00, 0xcc, 0x1a, 0xb3, 0x3b,
	0xd6, 0xea, 0x18, 0xcc, 0x1d, 0x54, 0x31, 0x6d, 0xa2, 0x93, 0x82, 0xa0, 0xba, 0x6c, 0xf4, 0x0c,
	0xd4, 0x5a, 0x09, 0xe9, 0xbf, 0x6f, 0xb6, 0x62, 0x46, 0xf7, 0x89, 0xae, 0x51, 0x36, 0x4f, 0x1b,
	0x13, 0xef, 0x87, 0x12, 0xba, 0x9c, 0x17, 0x32, 0xcc, 0x5b, 0x2a, 0xa6, 0x20, 0x70, 0x04, 0x0a,
	0xcc, 0xd4, 0xde, 0x73, 0xf7, 0xf8, 0xa0, 0x98, 0x78, 0x17, 0x73, 0x96, 0xcf, 0x2d, 0xc9, 0x6a,
	0xc6, 0xd1, 0xbd, 0x89, 0x7c, 0x57, 0x42, 0x17, 0x5e, 0x17, 0x8c, 0x1d, 0x1c, 0x3f, 0x2c, 0x16,
	0x48, 0xe5, 0x1f, 0x03, 0xb1, 0x73, 0x24, 0x45, 0x13, 0x31, 0x49, 0xf6, 0x23, 0x82, 0xb3, 0x7c,
	0x35, 0x93, 0x9b, 0xbf, 0x52, 0x8c, 0xd6, 0xb3, 0xa0, 0x1b, 0x16, 0xd3, 0x4c, 0x7b, 0x9b, 0x83,
	0xc3, 0x83, 0xe5, 0x93, 0x9b, 0x83, 0xc3, 0xd3, 0xe5, 0x99, 0xcd, 0xc1, 0xe1, 0x99, 0xf2, 0xec,
	0xe6, 0xe0, 0xf0, 0xdb, 0xe5, 0xea, 0xe6, 0xe0, 0xf0, 0x95, 0xf2, 0x92, 0xb9, 0xad, 0x1d, 0x3b,
	0x92, 0x66, 0x37, 0x31, 0xd4, 0xeb, 0xd0, 0x73, 0x64, 0xb3, 0xab, 0x43, 0xb0, 0xa8, 0x5d, 0x04,
	0x28, 0x41, 0xed, 0xe4, 0x69, 0x2f, 0x3f, 0x98, 0x71, 0x16, 0x82, 0x74, 0xd9, 0xe1, 0xb2, 0xaa,
	0xef, 0xca, 0x11, 0x41, 0x48, 0x8e, 0xcc, 0x4d, 0x36, 0xb8, 0xf4, 0x5a, 0x08, 0x57, 0xd8, 0x6f,
	0x07, 0x4f, 0x9e, 0x57, 0x4a, 0x4f, 0x9f, 0x57, 0x4a, 0x7f, 0x3c, 0xaf, 0x94, 0x7e, 0x7c, 0x51,
	0x19, 0x78, 0xfa, 0xa2, 0x32, 0xf0, 0xdb, 0x8b, 0xca, 0xc0, 0xc3, 0x9b, 0xff, 0x52, 0x98, 0x4e,
	0xad, 0xfb, 0xe3, 0x8c, 0x3a, 0x4a, 0x41, 0xee, 0x0f, 0x99, 0xdf, 0x51, 0x6e, 0xfc, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x0f, 0x68, 0x46, 0x6e, 0xb6, 0x11, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LambdaInitialScore.Size()
		i -= size
		if _, err := m.LambdaInitialScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xba
	{
		size := m.InferenceOutlierDetectionAlpha.Size()
		i -= size
		if _, err := m.InferenceOutlierDetectionAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xb2
	{
		size := m.InferenceOutlierDetectionThreshold.Size()
		i -= size
		if _, err := m.InferenceOutlierDetectionThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xaa
	if m.MinExperiencedWorkerRegrets != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinExperiencedWorkerRegrets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.TopicCreatorWhitelistEnabled {
		i--
		if m.TopicCreatorWhitelistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.GlobalWhitelistEnabled {
		i--
		if m.GlobalWhitelistEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	{
		size := m.PNormSafeDiv.Size()
		i -= size
		if _, err := m.PNormSafeDiv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x8a
	{
		size := m.InitialRegretQuantile.Size()
		i -= size
		if _, err := m.InitialRegretQuantile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x82
	if m.MaxStringLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxStringLength))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.MaxActiveTopicsPerBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxActiveTopicsPerBlock))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.MaxElementsPerForecast != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxElementsPerForecast))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	{
		size := m.DataSendingFee.Size()
		i -= size
		if _, err := m.DataSendingFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	{
		size := m.EpsilonSafeDiv.Size()
		i -= size
		if _, err := m.EpsilonSafeDiv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xda
	if m.HalfMaxProcessStakeRemovalsEndBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.HalfMaxProcessStakeRemovalsEndBlock))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	{
		size := m.EpsilonReputer.Size()
		i -= size
		if _, err := m.EpsilonReputer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	{
		size := m.CNorm.Size()
		i -= size
		if _, err := m.CNorm.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb2
	{
		size := m.CRewardForecast.Size()
		i -= size
		if _, err := m.CRewardForecast.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xaa
	{
		size := m.CRewardInference.Size()
		i -= size
		if _, err := m.CRewardInference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa2
	{
		size := m.PRewardReputer.Size()
		i -= size
		if _, err := m.PRewardReputer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	{
		size := m.PRewardForecast.Size()
		i -= size
		if _, err := m.PRewardForecast.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	{
		size := m.PRewardInference.Size()
		i -= size
		if _, err := m.PRewardInference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	if m.BlocksPerMonth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BlocksPerMonth))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.MinEpochLengthRecordLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinEpochLengthRecordLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.MaxPageLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxPageLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.DefaultPageLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DefaultPageLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	{
		size := m.RegistrationFee.Size()
		i -= size
		if _, err := m.RegistrationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if m.GradientDescentMaxIters != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GradientDescentMaxIters))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	{
		size := m.CreateTopicFee.Size()
		i -= size
		if _, err := m.CreateTopicFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	if m.MaxTopReputersToReward != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopReputersToReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.MaxTopForecastersToReward != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopForecastersToReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.MaxTopInferersToReward != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopInferersToReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.MaxSamplesToScaleScores != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSamplesToScaleScores))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	{
		size := m.ValidatorsVsAlloraPercentReward.Size()
		i -= size
		if _, err := m.ValidatorsVsAlloraPercentReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.TaskRewardAlpha.Size()
		i -= size
		if _, err := m.TaskRewardAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.TopicRewardAlpha.Size()
		i -= size
		if _, err := m.TopicRewardAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.TopicRewardFeeRevenueImportance.Size()
		i -= size
		if _, err := m.TopicRewardFeeRevenueImportance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.TopicRewardStakeImportance.Size()
		i -= size
		if _, err := m.TopicRewardStakeImportance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.MaxUnfulfilledReputerRequests != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxUnfulfilledReputerRequests))
		i--
		dAtA[i] = 0x70
	}
	if m.MaxUnfulfilledWorkerRequests != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxUnfulfilledWorkerRequests))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.MinStakeFraction.Size()
		i -= size
		if _, err := m.MinStakeFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MaxGradientThreshold.Size()
		i -= size
		if _, err := m.MaxGradientThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.LearningRate.Size()
		i -= size
		if _, err := m.LearningRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.BetaEntropy.Size()
		i -= size
		if _, err := m.BetaEntropy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.MinEpochLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinEpochLength))
		i--
		dAtA[i] = 0x38
	}
	if m.RemoveStakeDelayWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RemoveStakeDelayWindow))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.RequiredMinimumStake.Size()
		i -= size
		if _, err := m.RequiredMinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MinTopicWeight.Size()
		i -= size
		if _, err := m.MinTopicWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaxSerializedMsgLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSerializedMsgLength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MaxSerializedMsgLength != 0 {
		n += 1 + sovParams(uint64(m.MaxSerializedMsgLength))
	}
	l = m.MinTopicWeight.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.RequiredMinimumStake.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.RemoveStakeDelayWindow != 0 {
		n += 1 + sovParams(uint64(m.RemoveStakeDelayWindow))
	}
	if m.MinEpochLength != 0 {
		n += 1 + sovParams(uint64(m.MinEpochLength))
	}
	l = m.BetaEntropy.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.LearningRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxGradientThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinStakeFraction.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxUnfulfilledWorkerRequests != 0 {
		n += 1 + sovParams(uint64(m.MaxUnfulfilledWorkerRequests))
	}
	if m.MaxUnfulfilledReputerRequests != 0 {
		n += 1 + sovParams(uint64(m.MaxUnfulfilledReputerRequests))
	}
	l = m.TopicRewardStakeImportance.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.TopicRewardFeeRevenueImportance.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TopicRewardAlpha.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TaskRewardAlpha.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorsVsAlloraPercentReward.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.MaxSamplesToScaleScores != 0 {
		n += 2 + sovParams(uint64(m.MaxSamplesToScaleScores))
	}
	if m.MaxTopInferersToReward != 0 {
		n += 2 + sovParams(uint64(m.MaxTopInferersToReward))
	}
	if m.MaxTopForecastersToReward != 0 {
		n += 2 + sovParams(uint64(m.MaxTopForecastersToReward))
	}
	if m.MaxTopReputersToReward != 0 {
		n += 2 + sovParams(uint64(m.MaxTopReputersToReward))
	}
	l = m.CreateTopicFee.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.GradientDescentMaxIters != 0 {
		n += 2 + sovParams(uint64(m.GradientDescentMaxIters))
	}
	l = m.RegistrationFee.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.DefaultPageLimit != 0 {
		n += 2 + sovParams(uint64(m.DefaultPageLimit))
	}
	if m.MaxPageLimit != 0 {
		n += 2 + sovParams(uint64(m.MaxPageLimit))
	}
	if m.MinEpochLengthRecordLimit != 0 {
		n += 2 + sovParams(uint64(m.MinEpochLengthRecordLimit))
	}
	if m.BlocksPerMonth != 0 {
		n += 2 + sovParams(uint64(m.BlocksPerMonth))
	}
	l = m.PRewardInference.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.PRewardForecast.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.PRewardReputer.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.CRewardInference.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.CRewardForecast.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.CNorm.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.EpsilonReputer.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.HalfMaxProcessStakeRemovalsEndBlock != 0 {
		n += 2 + sovParams(uint64(m.HalfMaxProcessStakeRemovalsEndBlock))
	}
	l = m.EpsilonSafeDiv.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.DataSendingFee.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.MaxElementsPerForecast != 0 {
		n += 2 + sovParams(uint64(m.MaxElementsPerForecast))
	}
	if m.MaxActiveTopicsPerBlock != 0 {
		n += 2 + sovParams(uint64(m.MaxActiveTopicsPerBlock))
	}
	if m.MaxStringLength != 0 {
		n += 2 + sovParams(uint64(m.MaxStringLength))
	}
	l = m.InitialRegretQuantile.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.PNormSafeDiv.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.GlobalWhitelistEnabled {
		n += 3
	}
	if m.TopicCreatorWhitelistEnabled {
		n += 3
	}
	if m.MinExperiencedWorkerRegrets != 0 {
		n += 2 + sovParams(uint64(m.MinExperiencedWorkerRegrets))
	}
	l = m.InferenceOutlierDetectionThreshold.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.InferenceOutlierDetectionAlpha.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.LambdaInitialScore.Size()
	n += 2 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSerializedMsgLength", wireType)
			}
			m.MaxSerializedMsgLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSerializedMsgLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTopicWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTopicWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredMinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredMinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveStakeDelayWindow", wireType)
			}
			m.RemoveStakeDelayWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveStakeDelayWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEpochLength", wireType)
			}
			m.MinEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinEpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaEntropy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetaEntropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LearningRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGradientThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxGradientThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinStakeFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledWorkerRequests", wireType)
			}
			m.MaxUnfulfilledWorkerRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnfulfilledWorkerRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledReputerRequests", wireType)
			}
			m.MaxUnfulfilledReputerRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnfulfilledReputerRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardStakeImportance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopicRewardStakeImportance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardFeeRevenueImportance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopicRewardFeeRevenueImportance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopicRewardAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRewardAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaskRewardAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsVsAlloraPercentReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsVsAlloraPercentReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSamplesToScaleScores", wireType)
			}
			m.MaxSamplesToScaleScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSamplesToScaleScores |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopInferersToReward", wireType)
			}
			m.MaxTopInferersToReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopInferersToReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopForecastersToReward", wireType)
			}
			m.MaxTopForecastersToReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopForecastersToReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopReputersToReward", wireType)
			}
			m.MaxTopReputersToReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopReputersToReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTopicFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateTopicFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradientDescentMaxIters", wireType)
			}
			m.GradientDescentMaxIters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GradientDescentMaxIters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPageLimit", wireType)
			}
			m.DefaultPageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultPageLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPageLimit", wireType)
			}
			m.MaxPageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPageLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEpochLengthRecordLimit", wireType)
			}
			m.MinEpochLengthRecordLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinEpochLengthRecordLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerMonth", wireType)
			}
			m.BlocksPerMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerMonth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRewardInference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PRewardInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRewardForecast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PRewardForecast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRewardReputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PRewardReputer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRewardInference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CRewardInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRewardForecast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CRewardForecast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNorm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CNorm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpsilonReputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpsilonReputer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HalfMaxProcessStakeRemovalsEndBlock", wireType)
			}
			m.HalfMaxProcessStakeRemovalsEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HalfMaxProcessStakeRemovalsEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpsilonSafeDiv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpsilonSafeDiv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSendingFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataSendingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxElementsPerForecast", wireType)
			}
			m.MaxElementsPerForecast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxElementsPerForecast |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActiveTopicsPerBlock", wireType)
			}
			m.MaxActiveTopicsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActiveTopicsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStringLength", wireType)
			}
			m.MaxStringLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStringLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialRegretQuantile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialRegretQuantile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PNormSafeDiv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PNormSafeDiv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalWhitelistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalWhitelistEnabled = bool(v != 0)
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCreatorWhitelistEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicCreatorWhitelistEnabled = bool(v != 0)
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinExperiencedWorkerRegrets", wireType)
			}
			m.MinExperiencedWorkerRegrets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinExperiencedWorkerRegrets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceOutlierDetectionThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InferenceOutlierDetectionThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceOutlierDetectionAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InferenceOutlierDetectionAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LambdaInitialScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LambdaInitialScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
