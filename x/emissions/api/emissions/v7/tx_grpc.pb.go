// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: emissions/v7/tx.proto

package emissionsv7

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MsgService_UpdateParams_FullMethodName                         = "/emissions.v7.MsgService/UpdateParams"
	MsgService_CreateNewTopic_FullMethodName                       = "/emissions.v7.MsgService/CreateNewTopic"
	MsgService_Register_FullMethodName                             = "/emissions.v7.MsgService/Register"
	MsgService_RemoveRegistration_FullMethodName                   = "/emissions.v7.MsgService/RemoveRegistration"
	MsgService_AddStake_FullMethodName                             = "/emissions.v7.MsgService/AddStake"
	MsgService_RemoveStake_FullMethodName                          = "/emissions.v7.MsgService/RemoveStake"
	MsgService_CancelRemoveStake_FullMethodName                    = "/emissions.v7.MsgService/CancelRemoveStake"
	MsgService_DelegateStake_FullMethodName                        = "/emissions.v7.MsgService/DelegateStake"
	MsgService_RewardDelegateStake_FullMethodName                  = "/emissions.v7.MsgService/RewardDelegateStake"
	MsgService_RemoveDelegateStake_FullMethodName                  = "/emissions.v7.MsgService/RemoveDelegateStake"
	MsgService_CancelRemoveDelegateStake_FullMethodName            = "/emissions.v7.MsgService/CancelRemoveDelegateStake"
	MsgService_FundTopic_FullMethodName                            = "/emissions.v7.MsgService/FundTopic"
	MsgService_AddToWhitelistAdmin_FullMethodName                  = "/emissions.v7.MsgService/AddToWhitelistAdmin"
	MsgService_RemoveFromWhitelistAdmin_FullMethodName             = "/emissions.v7.MsgService/RemoveFromWhitelistAdmin"
	MsgService_InsertWorkerPayload_FullMethodName                  = "/emissions.v7.MsgService/InsertWorkerPayload"
	MsgService_InsertReputerPayload_FullMethodName                 = "/emissions.v7.MsgService/InsertReputerPayload"
	MsgService_AddToGlobalWhitelist_FullMethodName                 = "/emissions.v7.MsgService/AddToGlobalWhitelist"
	MsgService_RemoveFromGlobalWhitelist_FullMethodName            = "/emissions.v7.MsgService/RemoveFromGlobalWhitelist"
	MsgService_AddToGlobalWorkerWhitelist_FullMethodName           = "/emissions.v7.MsgService/AddToGlobalWorkerWhitelist"
	MsgService_RemoveFromGlobalWorkerWhitelist_FullMethodName      = "/emissions.v7.MsgService/RemoveFromGlobalWorkerWhitelist"
	MsgService_AddToGlobalReputerWhitelist_FullMethodName          = "/emissions.v7.MsgService/AddToGlobalReputerWhitelist"
	MsgService_RemoveFromGlobalReputerWhitelist_FullMethodName     = "/emissions.v7.MsgService/RemoveFromGlobalReputerWhitelist"
	MsgService_AddToGlobalAdminWhitelist_FullMethodName            = "/emissions.v7.MsgService/AddToGlobalAdminWhitelist"
	MsgService_RemoveFromGlobalAdminWhitelist_FullMethodName       = "/emissions.v7.MsgService/RemoveFromGlobalAdminWhitelist"
	MsgService_BulkAddToGlobalWorkerWhitelist_FullMethodName       = "/emissions.v7.MsgService/BulkAddToGlobalWorkerWhitelist"
	MsgService_BulkRemoveFromGlobalWorkerWhitelist_FullMethodName  = "/emissions.v7.MsgService/BulkRemoveFromGlobalWorkerWhitelist"
	MsgService_BulkAddToGlobalReputerWhitelist_FullMethodName      = "/emissions.v7.MsgService/BulkAddToGlobalReputerWhitelist"
	MsgService_BulkRemoveFromGlobalReputerWhitelist_FullMethodName = "/emissions.v7.MsgService/BulkRemoveFromGlobalReputerWhitelist"
	MsgService_BulkAddToTopicWorkerWhitelist_FullMethodName        = "/emissions.v7.MsgService/BulkAddToTopicWorkerWhitelist"
	MsgService_BulkRemoveFromTopicWorkerWhitelist_FullMethodName   = "/emissions.v7.MsgService/BulkRemoveFromTopicWorkerWhitelist"
	MsgService_BulkAddToTopicReputerWhitelist_FullMethodName       = "/emissions.v7.MsgService/BulkAddToTopicReputerWhitelist"
	MsgService_BulkRemoveFromTopicReputerWhitelist_FullMethodName  = "/emissions.v7.MsgService/BulkRemoveFromTopicReputerWhitelist"
	MsgService_EnableTopicWorkerWhitelist_FullMethodName           = "/emissions.v7.MsgService/EnableTopicWorkerWhitelist"
	MsgService_DisableTopicWorkerWhitelist_FullMethodName          = "/emissions.v7.MsgService/DisableTopicWorkerWhitelist"
	MsgService_EnableTopicReputerWhitelist_FullMethodName          = "/emissions.v7.MsgService/EnableTopicReputerWhitelist"
	MsgService_DisableTopicReputerWhitelist_FullMethodName         = "/emissions.v7.MsgService/DisableTopicReputerWhitelist"
	MsgService_AddToTopicCreatorWhitelist_FullMethodName           = "/emissions.v7.MsgService/AddToTopicCreatorWhitelist"
	MsgService_RemoveFromTopicCreatorWhitelist_FullMethodName      = "/emissions.v7.MsgService/RemoveFromTopicCreatorWhitelist"
	MsgService_AddToTopicWorkerWhitelist_FullMethodName            = "/emissions.v7.MsgService/AddToTopicWorkerWhitelist"
	MsgService_RemoveFromTopicWorkerWhitelist_FullMethodName       = "/emissions.v7.MsgService/RemoveFromTopicWorkerWhitelist"
	MsgService_AddToTopicReputerWhitelist_FullMethodName           = "/emissions.v7.MsgService/AddToTopicReputerWhitelist"
	MsgService_RemoveFromTopicReputerWhitelist_FullMethodName      = "/emissions.v7.MsgService/RemoveFromTopicReputerWhitelist"
)

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the module Msg service.
type MsgServiceClient interface {
	UpdateParams(ctx context.Context, in *UpdateParamsRequest, opts ...grpc.CallOption) (*UpdateParamsResponse, error)
	CreateNewTopic(ctx context.Context, in *CreateNewTopicRequest, opts ...grpc.CallOption) (*CreateNewTopicResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RemoveRegistration(ctx context.Context, in *RemoveRegistrationRequest, opts ...grpc.CallOption) (*RemoveRegistrationResponse, error)
	AddStake(ctx context.Context, in *AddStakeRequest, opts ...grpc.CallOption) (*AddStakeResponse, error)
	RemoveStake(ctx context.Context, in *RemoveStakeRequest, opts ...grpc.CallOption) (*RemoveStakeResponse, error)
	CancelRemoveStake(ctx context.Context, in *CancelRemoveStakeRequest, opts ...grpc.CallOption) (*CancelRemoveStakeResponse, error)
	DelegateStake(ctx context.Context, in *DelegateStakeRequest, opts ...grpc.CallOption) (*DelegateStakeResponse, error)
	RewardDelegateStake(ctx context.Context, in *RewardDelegateStakeRequest, opts ...grpc.CallOption) (*RewardDelegateStakeResponse, error)
	RemoveDelegateStake(ctx context.Context, in *RemoveDelegateStakeRequest, opts ...grpc.CallOption) (*RemoveDelegateStakeResponse, error)
	CancelRemoveDelegateStake(ctx context.Context, in *CancelRemoveDelegateStakeRequest, opts ...grpc.CallOption) (*CancelRemoveDelegateStakeResponse, error)
	FundTopic(ctx context.Context, in *FundTopicRequest, opts ...grpc.CallOption) (*FundTopicResponse, error)
	AddToWhitelistAdmin(ctx context.Context, in *AddToWhitelistAdminRequest, opts ...grpc.CallOption) (*AddToWhitelistAdminResponse, error)
	RemoveFromWhitelistAdmin(ctx context.Context, in *RemoveFromWhitelistAdminRequest, opts ...grpc.CallOption) (*RemoveFromWhitelistAdminResponse, error)
	InsertWorkerPayload(ctx context.Context, in *InsertWorkerPayloadRequest, opts ...grpc.CallOption) (*InsertWorkerPayloadResponse, error)
	InsertReputerPayload(ctx context.Context, in *InsertReputerPayloadRequest, opts ...grpc.CallOption) (*InsertReputerPayloadResponse, error)
	AddToGlobalWhitelist(ctx context.Context, in *AddToGlobalWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalWhitelistResponse, error)
	RemoveFromGlobalWhitelist(ctx context.Context, in *RemoveFromGlobalWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalWhitelistResponse, error)
	AddToGlobalWorkerWhitelist(ctx context.Context, in *AddToGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalWorkerWhitelistResponse, error)
	RemoveFromGlobalWorkerWhitelist(ctx context.Context, in *RemoveFromGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalWorkerWhitelistResponse, error)
	AddToGlobalReputerWhitelist(ctx context.Context, in *AddToGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalReputerWhitelistResponse, error)
	RemoveFromGlobalReputerWhitelist(ctx context.Context, in *RemoveFromGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalReputerWhitelistResponse, error)
	AddToGlobalAdminWhitelist(ctx context.Context, in *AddToGlobalAdminWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalAdminWhitelistResponse, error)
	RemoveFromGlobalAdminWhitelist(ctx context.Context, in *RemoveFromGlobalAdminWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalAdminWhitelistResponse, error)
	BulkAddToGlobalWorkerWhitelist(ctx context.Context, in *BulkAddToGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToGlobalWorkerWhitelistResponse, error)
	BulkRemoveFromGlobalWorkerWhitelist(ctx context.Context, in *BulkRemoveFromGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromGlobalWorkerWhitelistResponse, error)
	BulkAddToGlobalReputerWhitelist(ctx context.Context, in *BulkAddToGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToGlobalReputerWhitelistResponse, error)
	BulkRemoveFromGlobalReputerWhitelist(ctx context.Context, in *BulkRemoveFromGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromGlobalReputerWhitelistResponse, error)
	BulkAddToTopicWorkerWhitelist(ctx context.Context, in *BulkAddToTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToTopicWorkerWhitelistResponse, error)
	BulkRemoveFromTopicWorkerWhitelist(ctx context.Context, in *BulkRemoveFromTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromTopicWorkerWhitelistResponse, error)
	BulkAddToTopicReputerWhitelist(ctx context.Context, in *BulkAddToTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToTopicReputerWhitelistResponse, error)
	BulkRemoveFromTopicReputerWhitelist(ctx context.Context, in *BulkRemoveFromTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromTopicReputerWhitelistResponse, error)
	EnableTopicWorkerWhitelist(ctx context.Context, in *EnableTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*EnableTopicWorkerWhitelistResponse, error)
	DisableTopicWorkerWhitelist(ctx context.Context, in *DisableTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*DisableTopicWorkerWhitelistResponse, error)
	EnableTopicReputerWhitelist(ctx context.Context, in *EnableTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*EnableTopicReputerWhitelistResponse, error)
	DisableTopicReputerWhitelist(ctx context.Context, in *DisableTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*DisableTopicReputerWhitelistResponse, error)
	AddToTopicCreatorWhitelist(ctx context.Context, in *AddToTopicCreatorWhitelistRequest, opts ...grpc.CallOption) (*AddToTopicCreatorWhitelistResponse, error)
	RemoveFromTopicCreatorWhitelist(ctx context.Context, in *RemoveFromTopicCreatorWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromTopicCreatorWhitelistResponse, error)
	AddToTopicWorkerWhitelist(ctx context.Context, in *AddToTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*AddToTopicWorkerWhitelistResponse, error)
	RemoveFromTopicWorkerWhitelist(ctx context.Context, in *RemoveFromTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromTopicWorkerWhitelistResponse, error)
	AddToTopicReputerWhitelist(ctx context.Context, in *AddToTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*AddToTopicReputerWhitelistResponse, error)
	RemoveFromTopicReputerWhitelist(ctx context.Context, in *RemoveFromTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromTopicReputerWhitelistResponse, error)
}

type msgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgServiceClient(cc grpc.ClientConnInterface) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) UpdateParams(ctx context.Context, in *UpdateParamsRequest, opts ...grpc.CallOption) (*UpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateParamsResponse)
	err := c.cc.Invoke(ctx, MsgService_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CreateNewTopic(ctx context.Context, in *CreateNewTopicRequest, opts ...grpc.CallOption) (*CreateNewTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewTopicResponse)
	err := c.cc.Invoke(ctx, MsgService_CreateNewTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, MsgService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveRegistration(ctx context.Context, in *RemoveRegistrationRequest, opts ...grpc.CallOption) (*RemoveRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRegistrationResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddStake(ctx context.Context, in *AddStakeRequest, opts ...grpc.CallOption) (*AddStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_AddStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveStake(ctx context.Context, in *RemoveStakeRequest, opts ...grpc.CallOption) (*RemoveStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CancelRemoveStake(ctx context.Context, in *CancelRemoveStakeRequest, opts ...grpc.CallOption) (*CancelRemoveStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelRemoveStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_CancelRemoveStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) DelegateStake(ctx context.Context, in *DelegateStakeRequest, opts ...grpc.CallOption) (*DelegateStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelegateStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_DelegateStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RewardDelegateStake(ctx context.Context, in *RewardDelegateStakeRequest, opts ...grpc.CallOption) (*RewardDelegateStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RewardDelegateStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_RewardDelegateStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveDelegateStake(ctx context.Context, in *RemoveDelegateStakeRequest, opts ...grpc.CallOption) (*RemoveDelegateStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDelegateStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveDelegateStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) CancelRemoveDelegateStake(ctx context.Context, in *CancelRemoveDelegateStakeRequest, opts ...grpc.CallOption) (*CancelRemoveDelegateStakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelRemoveDelegateStakeResponse)
	err := c.cc.Invoke(ctx, MsgService_CancelRemoveDelegateStake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) FundTopic(ctx context.Context, in *FundTopicRequest, opts ...grpc.CallOption) (*FundTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundTopicResponse)
	err := c.cc.Invoke(ctx, MsgService_FundTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToWhitelistAdmin(ctx context.Context, in *AddToWhitelistAdminRequest, opts ...grpc.CallOption) (*AddToWhitelistAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToWhitelistAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromWhitelistAdmin(ctx context.Context, in *RemoveFromWhitelistAdminRequest, opts ...grpc.CallOption) (*RemoveFromWhitelistAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromWhitelistAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) InsertWorkerPayload(ctx context.Context, in *InsertWorkerPayloadRequest, opts ...grpc.CallOption) (*InsertWorkerPayloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertWorkerPayloadResponse)
	err := c.cc.Invoke(ctx, MsgService_InsertWorkerPayload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) InsertReputerPayload(ctx context.Context, in *InsertReputerPayloadRequest, opts ...grpc.CallOption) (*InsertReputerPayloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertReputerPayloadResponse)
	err := c.cc.Invoke(ctx, MsgService_InsertReputerPayload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToGlobalWhitelist(ctx context.Context, in *AddToGlobalWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToGlobalWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToGlobalWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromGlobalWhitelist(ctx context.Context, in *RemoveFromGlobalWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromGlobalWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromGlobalWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToGlobalWorkerWhitelist(ctx context.Context, in *AddToGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToGlobalWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToGlobalWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromGlobalWorkerWhitelist(ctx context.Context, in *RemoveFromGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromGlobalWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromGlobalWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToGlobalReputerWhitelist(ctx context.Context, in *AddToGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToGlobalReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToGlobalReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromGlobalReputerWhitelist(ctx context.Context, in *RemoveFromGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromGlobalReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromGlobalReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToGlobalAdminWhitelist(ctx context.Context, in *AddToGlobalAdminWhitelistRequest, opts ...grpc.CallOption) (*AddToGlobalAdminWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToGlobalAdminWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToGlobalAdminWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromGlobalAdminWhitelist(ctx context.Context, in *RemoveFromGlobalAdminWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromGlobalAdminWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromGlobalAdminWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromGlobalAdminWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkAddToGlobalWorkerWhitelist(ctx context.Context, in *BulkAddToGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToGlobalWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkAddToGlobalWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkAddToGlobalWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkRemoveFromGlobalWorkerWhitelist(ctx context.Context, in *BulkRemoveFromGlobalWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromGlobalWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkRemoveFromGlobalWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkRemoveFromGlobalWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkAddToGlobalReputerWhitelist(ctx context.Context, in *BulkAddToGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToGlobalReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkAddToGlobalReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkAddToGlobalReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkRemoveFromGlobalReputerWhitelist(ctx context.Context, in *BulkRemoveFromGlobalReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromGlobalReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkRemoveFromGlobalReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkRemoveFromGlobalReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkAddToTopicWorkerWhitelist(ctx context.Context, in *BulkAddToTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToTopicWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkAddToTopicWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkAddToTopicWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkRemoveFromTopicWorkerWhitelist(ctx context.Context, in *BulkRemoveFromTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromTopicWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkRemoveFromTopicWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkRemoveFromTopicWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkAddToTopicReputerWhitelist(ctx context.Context, in *BulkAddToTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkAddToTopicReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkAddToTopicReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkAddToTopicReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) BulkRemoveFromTopicReputerWhitelist(ctx context.Context, in *BulkRemoveFromTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*BulkRemoveFromTopicReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkRemoveFromTopicReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_BulkRemoveFromTopicReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) EnableTopicWorkerWhitelist(ctx context.Context, in *EnableTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*EnableTopicWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableTopicWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_EnableTopicWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) DisableTopicWorkerWhitelist(ctx context.Context, in *DisableTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*DisableTopicWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableTopicWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_DisableTopicWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) EnableTopicReputerWhitelist(ctx context.Context, in *EnableTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*EnableTopicReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableTopicReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_EnableTopicReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) DisableTopicReputerWhitelist(ctx context.Context, in *DisableTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*DisableTopicReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableTopicReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_DisableTopicReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToTopicCreatorWhitelist(ctx context.Context, in *AddToTopicCreatorWhitelistRequest, opts ...grpc.CallOption) (*AddToTopicCreatorWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToTopicCreatorWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToTopicCreatorWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromTopicCreatorWhitelist(ctx context.Context, in *RemoveFromTopicCreatorWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromTopicCreatorWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromTopicCreatorWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromTopicCreatorWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToTopicWorkerWhitelist(ctx context.Context, in *AddToTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*AddToTopicWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToTopicWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToTopicWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromTopicWorkerWhitelist(ctx context.Context, in *RemoveFromTopicWorkerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromTopicWorkerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromTopicWorkerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromTopicWorkerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) AddToTopicReputerWhitelist(ctx context.Context, in *AddToTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*AddToTopicReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToTopicReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_AddToTopicReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) RemoveFromTopicReputerWhitelist(ctx context.Context, in *RemoveFromTopicReputerWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromTopicReputerWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromTopicReputerWhitelistResponse)
	err := c.cc.Invoke(ctx, MsgService_RemoveFromTopicReputerWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
// All implementations must embed UnimplementedMsgServiceServer
// for forward compatibility.
//
// Msg defines the module Msg service.
type MsgServiceServer interface {
	UpdateParams(context.Context, *UpdateParamsRequest) (*UpdateParamsResponse, error)
	CreateNewTopic(context.Context, *CreateNewTopicRequest) (*CreateNewTopicResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RemoveRegistration(context.Context, *RemoveRegistrationRequest) (*RemoveRegistrationResponse, error)
	AddStake(context.Context, *AddStakeRequest) (*AddStakeResponse, error)
	RemoveStake(context.Context, *RemoveStakeRequest) (*RemoveStakeResponse, error)
	CancelRemoveStake(context.Context, *CancelRemoveStakeRequest) (*CancelRemoveStakeResponse, error)
	DelegateStake(context.Context, *DelegateStakeRequest) (*DelegateStakeResponse, error)
	RewardDelegateStake(context.Context, *RewardDelegateStakeRequest) (*RewardDelegateStakeResponse, error)
	RemoveDelegateStake(context.Context, *RemoveDelegateStakeRequest) (*RemoveDelegateStakeResponse, error)
	CancelRemoveDelegateStake(context.Context, *CancelRemoveDelegateStakeRequest) (*CancelRemoveDelegateStakeResponse, error)
	FundTopic(context.Context, *FundTopicRequest) (*FundTopicResponse, error)
	AddToWhitelistAdmin(context.Context, *AddToWhitelistAdminRequest) (*AddToWhitelistAdminResponse, error)
	RemoveFromWhitelistAdmin(context.Context, *RemoveFromWhitelistAdminRequest) (*RemoveFromWhitelistAdminResponse, error)
	InsertWorkerPayload(context.Context, *InsertWorkerPayloadRequest) (*InsertWorkerPayloadResponse, error)
	InsertReputerPayload(context.Context, *InsertReputerPayloadRequest) (*InsertReputerPayloadResponse, error)
	AddToGlobalWhitelist(context.Context, *AddToGlobalWhitelistRequest) (*AddToGlobalWhitelistResponse, error)
	RemoveFromGlobalWhitelist(context.Context, *RemoveFromGlobalWhitelistRequest) (*RemoveFromGlobalWhitelistResponse, error)
	AddToGlobalWorkerWhitelist(context.Context, *AddToGlobalWorkerWhitelistRequest) (*AddToGlobalWorkerWhitelistResponse, error)
	RemoveFromGlobalWorkerWhitelist(context.Context, *RemoveFromGlobalWorkerWhitelistRequest) (*RemoveFromGlobalWorkerWhitelistResponse, error)
	AddToGlobalReputerWhitelist(context.Context, *AddToGlobalReputerWhitelistRequest) (*AddToGlobalReputerWhitelistResponse, error)
	RemoveFromGlobalReputerWhitelist(context.Context, *RemoveFromGlobalReputerWhitelistRequest) (*RemoveFromGlobalReputerWhitelistResponse, error)
	AddToGlobalAdminWhitelist(context.Context, *AddToGlobalAdminWhitelistRequest) (*AddToGlobalAdminWhitelistResponse, error)
	RemoveFromGlobalAdminWhitelist(context.Context, *RemoveFromGlobalAdminWhitelistRequest) (*RemoveFromGlobalAdminWhitelistResponse, error)
	BulkAddToGlobalWorkerWhitelist(context.Context, *BulkAddToGlobalWorkerWhitelistRequest) (*BulkAddToGlobalWorkerWhitelistResponse, error)
	BulkRemoveFromGlobalWorkerWhitelist(context.Context, *BulkRemoveFromGlobalWorkerWhitelistRequest) (*BulkRemoveFromGlobalWorkerWhitelistResponse, error)
	BulkAddToGlobalReputerWhitelist(context.Context, *BulkAddToGlobalReputerWhitelistRequest) (*BulkAddToGlobalReputerWhitelistResponse, error)
	BulkRemoveFromGlobalReputerWhitelist(context.Context, *BulkRemoveFromGlobalReputerWhitelistRequest) (*BulkRemoveFromGlobalReputerWhitelistResponse, error)
	BulkAddToTopicWorkerWhitelist(context.Context, *BulkAddToTopicWorkerWhitelistRequest) (*BulkAddToTopicWorkerWhitelistResponse, error)
	BulkRemoveFromTopicWorkerWhitelist(context.Context, *BulkRemoveFromTopicWorkerWhitelistRequest) (*BulkRemoveFromTopicWorkerWhitelistResponse, error)
	BulkAddToTopicReputerWhitelist(context.Context, *BulkAddToTopicReputerWhitelistRequest) (*BulkAddToTopicReputerWhitelistResponse, error)
	BulkRemoveFromTopicReputerWhitelist(context.Context, *BulkRemoveFromTopicReputerWhitelistRequest) (*BulkRemoveFromTopicReputerWhitelistResponse, error)
	EnableTopicWorkerWhitelist(context.Context, *EnableTopicWorkerWhitelistRequest) (*EnableTopicWorkerWhitelistResponse, error)
	DisableTopicWorkerWhitelist(context.Context, *DisableTopicWorkerWhitelistRequest) (*DisableTopicWorkerWhitelistResponse, error)
	EnableTopicReputerWhitelist(context.Context, *EnableTopicReputerWhitelistRequest) (*EnableTopicReputerWhitelistResponse, error)
	DisableTopicReputerWhitelist(context.Context, *DisableTopicReputerWhitelistRequest) (*DisableTopicReputerWhitelistResponse, error)
	AddToTopicCreatorWhitelist(context.Context, *AddToTopicCreatorWhitelistRequest) (*AddToTopicCreatorWhitelistResponse, error)
	RemoveFromTopicCreatorWhitelist(context.Context, *RemoveFromTopicCreatorWhitelistRequest) (*RemoveFromTopicCreatorWhitelistResponse, error)
	AddToTopicWorkerWhitelist(context.Context, *AddToTopicWorkerWhitelistRequest) (*AddToTopicWorkerWhitelistResponse, error)
	RemoveFromTopicWorkerWhitelist(context.Context, *RemoveFromTopicWorkerWhitelistRequest) (*RemoveFromTopicWorkerWhitelistResponse, error)
	AddToTopicReputerWhitelist(context.Context, *AddToTopicReputerWhitelistRequest) (*AddToTopicReputerWhitelistResponse, error)
	RemoveFromTopicReputerWhitelist(context.Context, *RemoveFromTopicReputerWhitelistRequest) (*RemoveFromTopicReputerWhitelistResponse, error)
	mustEmbedUnimplementedMsgServiceServer()
}

// UnimplementedMsgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServiceServer struct{}

func (UnimplementedMsgServiceServer) UpdateParams(context.Context, *UpdateParamsRequest) (*UpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServiceServer) CreateNewTopic(context.Context, *CreateNewTopicRequest) (*CreateNewTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTopic not implemented")
}
func (UnimplementedMsgServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMsgServiceServer) RemoveRegistration(context.Context, *RemoveRegistrationRequest) (*RemoveRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRegistration not implemented")
}
func (UnimplementedMsgServiceServer) AddStake(context.Context, *AddStakeRequest) (*AddStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStake not implemented")
}
func (UnimplementedMsgServiceServer) RemoveStake(context.Context, *RemoveStakeRequest) (*RemoveStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStake not implemented")
}
func (UnimplementedMsgServiceServer) CancelRemoveStake(context.Context, *CancelRemoveStakeRequest) (*CancelRemoveStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRemoveStake not implemented")
}
func (UnimplementedMsgServiceServer) DelegateStake(context.Context, *DelegateStakeRequest) (*DelegateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateStake not implemented")
}
func (UnimplementedMsgServiceServer) RewardDelegateStake(context.Context, *RewardDelegateStakeRequest) (*RewardDelegateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardDelegateStake not implemented")
}
func (UnimplementedMsgServiceServer) RemoveDelegateStake(context.Context, *RemoveDelegateStakeRequest) (*RemoveDelegateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDelegateStake not implemented")
}
func (UnimplementedMsgServiceServer) CancelRemoveDelegateStake(context.Context, *CancelRemoveDelegateStakeRequest) (*CancelRemoveDelegateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRemoveDelegateStake not implemented")
}
func (UnimplementedMsgServiceServer) FundTopic(context.Context, *FundTopicRequest) (*FundTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundTopic not implemented")
}
func (UnimplementedMsgServiceServer) AddToWhitelistAdmin(context.Context, *AddToWhitelistAdminRequest) (*AddToWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelistAdmin not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromWhitelistAdmin(context.Context, *RemoveFromWhitelistAdminRequest) (*RemoveFromWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelistAdmin not implemented")
}
func (UnimplementedMsgServiceServer) InsertWorkerPayload(context.Context, *InsertWorkerPayloadRequest) (*InsertWorkerPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertWorkerPayload not implemented")
}
func (UnimplementedMsgServiceServer) InsertReputerPayload(context.Context, *InsertReputerPayloadRequest) (*InsertReputerPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertReputerPayload not implemented")
}
func (UnimplementedMsgServiceServer) AddToGlobalWhitelist(context.Context, *AddToGlobalWhitelistRequest) (*AddToGlobalWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToGlobalWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromGlobalWhitelist(context.Context, *RemoveFromGlobalWhitelistRequest) (*RemoveFromGlobalWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromGlobalWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) AddToGlobalWorkerWhitelist(context.Context, *AddToGlobalWorkerWhitelistRequest) (*AddToGlobalWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToGlobalWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromGlobalWorkerWhitelist(context.Context, *RemoveFromGlobalWorkerWhitelistRequest) (*RemoveFromGlobalWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromGlobalWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) AddToGlobalReputerWhitelist(context.Context, *AddToGlobalReputerWhitelistRequest) (*AddToGlobalReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToGlobalReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromGlobalReputerWhitelist(context.Context, *RemoveFromGlobalReputerWhitelistRequest) (*RemoveFromGlobalReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromGlobalReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) AddToGlobalAdminWhitelist(context.Context, *AddToGlobalAdminWhitelistRequest) (*AddToGlobalAdminWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToGlobalAdminWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromGlobalAdminWhitelist(context.Context, *RemoveFromGlobalAdminWhitelistRequest) (*RemoveFromGlobalAdminWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromGlobalAdminWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkAddToGlobalWorkerWhitelist(context.Context, *BulkAddToGlobalWorkerWhitelistRequest) (*BulkAddToGlobalWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddToGlobalWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkRemoveFromGlobalWorkerWhitelist(context.Context, *BulkRemoveFromGlobalWorkerWhitelistRequest) (*BulkRemoveFromGlobalWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveFromGlobalWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkAddToGlobalReputerWhitelist(context.Context, *BulkAddToGlobalReputerWhitelistRequest) (*BulkAddToGlobalReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddToGlobalReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkRemoveFromGlobalReputerWhitelist(context.Context, *BulkRemoveFromGlobalReputerWhitelistRequest) (*BulkRemoveFromGlobalReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveFromGlobalReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkAddToTopicWorkerWhitelist(context.Context, *BulkAddToTopicWorkerWhitelistRequest) (*BulkAddToTopicWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddToTopicWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkRemoveFromTopicWorkerWhitelist(context.Context, *BulkRemoveFromTopicWorkerWhitelistRequest) (*BulkRemoveFromTopicWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveFromTopicWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkAddToTopicReputerWhitelist(context.Context, *BulkAddToTopicReputerWhitelistRequest) (*BulkAddToTopicReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddToTopicReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) BulkRemoveFromTopicReputerWhitelist(context.Context, *BulkRemoveFromTopicReputerWhitelistRequest) (*BulkRemoveFromTopicReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkRemoveFromTopicReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) EnableTopicWorkerWhitelist(context.Context, *EnableTopicWorkerWhitelistRequest) (*EnableTopicWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTopicWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) DisableTopicWorkerWhitelist(context.Context, *DisableTopicWorkerWhitelistRequest) (*DisableTopicWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTopicWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) EnableTopicReputerWhitelist(context.Context, *EnableTopicReputerWhitelistRequest) (*EnableTopicReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTopicReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) DisableTopicReputerWhitelist(context.Context, *DisableTopicReputerWhitelistRequest) (*DisableTopicReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTopicReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) AddToTopicCreatorWhitelist(context.Context, *AddToTopicCreatorWhitelistRequest) (*AddToTopicCreatorWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToTopicCreatorWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromTopicCreatorWhitelist(context.Context, *RemoveFromTopicCreatorWhitelistRequest) (*RemoveFromTopicCreatorWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromTopicCreatorWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) AddToTopicWorkerWhitelist(context.Context, *AddToTopicWorkerWhitelistRequest) (*AddToTopicWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToTopicWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromTopicWorkerWhitelist(context.Context, *RemoveFromTopicWorkerWhitelistRequest) (*RemoveFromTopicWorkerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromTopicWorkerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) AddToTopicReputerWhitelist(context.Context, *AddToTopicReputerWhitelistRequest) (*AddToTopicReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToTopicReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) RemoveFromTopicReputerWhitelist(context.Context, *RemoveFromTopicReputerWhitelistRequest) (*RemoveFromTopicReputerWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromTopicReputerWhitelist not implemented")
}
func (UnimplementedMsgServiceServer) mustEmbedUnimplementedMsgServiceServer() {}
func (UnimplementedMsgServiceServer) testEmbeddedByValue()                    {}

// UnsafeMsgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServiceServer will
// result in compilation errors.
type UnsafeMsgServiceServer interface {
	mustEmbedUnimplementedMsgServiceServer()
}

func RegisterMsgServiceServer(s grpc.ServiceRegistrar, srv MsgServiceServer) {
	// If the following call pancis, it indicates UnimplementedMsgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MsgService_ServiceDesc, srv)
}

func _MsgService_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).UpdateParams(ctx, req.(*UpdateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CreateNewTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateNewTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_CreateNewTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateNewTopic(ctx, req.(*CreateNewTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveRegistration(ctx, req.(*RemoveRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddStake(ctx, req.(*AddStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveStake(ctx, req.(*RemoveStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CancelRemoveStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRemoveStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CancelRemoveStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_CancelRemoveStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CancelRemoveStake(ctx, req.(*CancelRemoveStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_DelegateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).DelegateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_DelegateStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).DelegateStake(ctx, req.(*DelegateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RewardDelegateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardDelegateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RewardDelegateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RewardDelegateStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RewardDelegateStake(ctx, req.(*RewardDelegateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveDelegateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDelegateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveDelegateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveDelegateStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveDelegateStake(ctx, req.(*RemoveDelegateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_CancelRemoveDelegateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRemoveDelegateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CancelRemoveDelegateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_CancelRemoveDelegateStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CancelRemoveDelegateStake(ctx, req.(*CancelRemoveDelegateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_FundTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).FundTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_FundTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).FundTopic(ctx, req.(*FundTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToWhitelistAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToWhitelistAdmin(ctx, req.(*AddToWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromWhitelistAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromWhitelistAdmin(ctx, req.(*RemoveFromWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_InsertWorkerPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertWorkerPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).InsertWorkerPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_InsertWorkerPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).InsertWorkerPayload(ctx, req.(*InsertWorkerPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_InsertReputerPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertReputerPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).InsertReputerPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_InsertReputerPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).InsertReputerPayload(ctx, req.(*InsertReputerPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToGlobalWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGlobalWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToGlobalWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToGlobalWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToGlobalWhitelist(ctx, req.(*AddToGlobalWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromGlobalWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGlobalWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromGlobalWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromGlobalWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromGlobalWhitelist(ctx, req.(*RemoveFromGlobalWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToGlobalWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGlobalWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToGlobalWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToGlobalWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToGlobalWorkerWhitelist(ctx, req.(*AddToGlobalWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromGlobalWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGlobalWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromGlobalWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromGlobalWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromGlobalWorkerWhitelist(ctx, req.(*RemoveFromGlobalWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToGlobalReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGlobalReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToGlobalReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToGlobalReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToGlobalReputerWhitelist(ctx, req.(*AddToGlobalReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromGlobalReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGlobalReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromGlobalReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromGlobalReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromGlobalReputerWhitelist(ctx, req.(*RemoveFromGlobalReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToGlobalAdminWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGlobalAdminWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToGlobalAdminWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToGlobalAdminWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToGlobalAdminWhitelist(ctx, req.(*AddToGlobalAdminWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromGlobalAdminWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGlobalAdminWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromGlobalAdminWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromGlobalAdminWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromGlobalAdminWhitelist(ctx, req.(*RemoveFromGlobalAdminWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkAddToGlobalWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddToGlobalWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkAddToGlobalWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkAddToGlobalWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkAddToGlobalWorkerWhitelist(ctx, req.(*BulkAddToGlobalWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkRemoveFromGlobalWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveFromGlobalWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkRemoveFromGlobalWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkRemoveFromGlobalWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkRemoveFromGlobalWorkerWhitelist(ctx, req.(*BulkRemoveFromGlobalWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkAddToGlobalReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddToGlobalReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkAddToGlobalReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkAddToGlobalReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkAddToGlobalReputerWhitelist(ctx, req.(*BulkAddToGlobalReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkRemoveFromGlobalReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveFromGlobalReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkRemoveFromGlobalReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkRemoveFromGlobalReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkRemoveFromGlobalReputerWhitelist(ctx, req.(*BulkRemoveFromGlobalReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkAddToTopicWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddToTopicWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkAddToTopicWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkAddToTopicWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkAddToTopicWorkerWhitelist(ctx, req.(*BulkAddToTopicWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkRemoveFromTopicWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveFromTopicWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkRemoveFromTopicWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkRemoveFromTopicWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkRemoveFromTopicWorkerWhitelist(ctx, req.(*BulkRemoveFromTopicWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkAddToTopicReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddToTopicReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkAddToTopicReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkAddToTopicReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkAddToTopicReputerWhitelist(ctx, req.(*BulkAddToTopicReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_BulkRemoveFromTopicReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveFromTopicReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).BulkRemoveFromTopicReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_BulkRemoveFromTopicReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).BulkRemoveFromTopicReputerWhitelist(ctx, req.(*BulkRemoveFromTopicReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_EnableTopicWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTopicWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).EnableTopicWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_EnableTopicWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).EnableTopicWorkerWhitelist(ctx, req.(*EnableTopicWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_DisableTopicWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTopicWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).DisableTopicWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_DisableTopicWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).DisableTopicWorkerWhitelist(ctx, req.(*DisableTopicWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_EnableTopicReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTopicReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).EnableTopicReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_EnableTopicReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).EnableTopicReputerWhitelist(ctx, req.(*EnableTopicReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_DisableTopicReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTopicReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).DisableTopicReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_DisableTopicReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).DisableTopicReputerWhitelist(ctx, req.(*DisableTopicReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToTopicCreatorWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTopicCreatorWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToTopicCreatorWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToTopicCreatorWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToTopicCreatorWhitelist(ctx, req.(*AddToTopicCreatorWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromTopicCreatorWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromTopicCreatorWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromTopicCreatorWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromTopicCreatorWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromTopicCreatorWhitelist(ctx, req.(*RemoveFromTopicCreatorWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToTopicWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTopicWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToTopicWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToTopicWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToTopicWorkerWhitelist(ctx, req.(*AddToTopicWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromTopicWorkerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromTopicWorkerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromTopicWorkerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromTopicWorkerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromTopicWorkerWhitelist(ctx, req.(*RemoveFromTopicWorkerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_AddToTopicReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTopicReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).AddToTopicReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_AddToTopicReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).AddToTopicReputerWhitelist(ctx, req.(*AddToTopicReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_RemoveFromTopicReputerWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromTopicReputerWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).RemoveFromTopicReputerWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgService_RemoveFromTopicReputerWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).RemoveFromTopicReputerWhitelist(ctx, req.(*RemoveFromTopicReputerWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgService_ServiceDesc is the grpc.ServiceDesc for MsgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.v7.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _MsgService_UpdateParams_Handler,
		},
		{
			MethodName: "CreateNewTopic",
			Handler:    _MsgService_CreateNewTopic_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _MsgService_Register_Handler,
		},
		{
			MethodName: "RemoveRegistration",
			Handler:    _MsgService_RemoveRegistration_Handler,
		},
		{
			MethodName: "AddStake",
			Handler:    _MsgService_AddStake_Handler,
		},
		{
			MethodName: "RemoveStake",
			Handler:    _MsgService_RemoveStake_Handler,
		},
		{
			MethodName: "CancelRemoveStake",
			Handler:    _MsgService_CancelRemoveStake_Handler,
		},
		{
			MethodName: "DelegateStake",
			Handler:    _MsgService_DelegateStake_Handler,
		},
		{
			MethodName: "RewardDelegateStake",
			Handler:    _MsgService_RewardDelegateStake_Handler,
		},
		{
			MethodName: "RemoveDelegateStake",
			Handler:    _MsgService_RemoveDelegateStake_Handler,
		},
		{
			MethodName: "CancelRemoveDelegateStake",
			Handler:    _MsgService_CancelRemoveDelegateStake_Handler,
		},
		{
			MethodName: "FundTopic",
			Handler:    _MsgService_FundTopic_Handler,
		},
		{
			MethodName: "AddToWhitelistAdmin",
			Handler:    _MsgService_AddToWhitelistAdmin_Handler,
		},
		{
			MethodName: "RemoveFromWhitelistAdmin",
			Handler:    _MsgService_RemoveFromWhitelistAdmin_Handler,
		},
		{
			MethodName: "InsertWorkerPayload",
			Handler:    _MsgService_InsertWorkerPayload_Handler,
		},
		{
			MethodName: "InsertReputerPayload",
			Handler:    _MsgService_InsertReputerPayload_Handler,
		},
		{
			MethodName: "AddToGlobalWhitelist",
			Handler:    _MsgService_AddToGlobalWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromGlobalWhitelist",
			Handler:    _MsgService_RemoveFromGlobalWhitelist_Handler,
		},
		{
			MethodName: "AddToGlobalWorkerWhitelist",
			Handler:    _MsgService_AddToGlobalWorkerWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromGlobalWorkerWhitelist",
			Handler:    _MsgService_RemoveFromGlobalWorkerWhitelist_Handler,
		},
		{
			MethodName: "AddToGlobalReputerWhitelist",
			Handler:    _MsgService_AddToGlobalReputerWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromGlobalReputerWhitelist",
			Handler:    _MsgService_RemoveFromGlobalReputerWhitelist_Handler,
		},
		{
			MethodName: "AddToGlobalAdminWhitelist",
			Handler:    _MsgService_AddToGlobalAdminWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromGlobalAdminWhitelist",
			Handler:    _MsgService_RemoveFromGlobalAdminWhitelist_Handler,
		},
		{
			MethodName: "BulkAddToGlobalWorkerWhitelist",
			Handler:    _MsgService_BulkAddToGlobalWorkerWhitelist_Handler,
		},
		{
			MethodName: "BulkRemoveFromGlobalWorkerWhitelist",
			Handler:    _MsgService_BulkRemoveFromGlobalWorkerWhitelist_Handler,
		},
		{
			MethodName: "BulkAddToGlobalReputerWhitelist",
			Handler:    _MsgService_BulkAddToGlobalReputerWhitelist_Handler,
		},
		{
			MethodName: "BulkRemoveFromGlobalReputerWhitelist",
			Handler:    _MsgService_BulkRemoveFromGlobalReputerWhitelist_Handler,
		},
		{
			MethodName: "BulkAddToTopicWorkerWhitelist",
			Handler:    _MsgService_BulkAddToTopicWorkerWhitelist_Handler,
		},
		{
			MethodName: "BulkRemoveFromTopicWorkerWhitelist",
			Handler:    _MsgService_BulkRemoveFromTopicWorkerWhitelist_Handler,
		},
		{
			MethodName: "BulkAddToTopicReputerWhitelist",
			Handler:    _MsgService_BulkAddToTopicReputerWhitelist_Handler,
		},
		{
			MethodName: "BulkRemoveFromTopicReputerWhitelist",
			Handler:    _MsgService_BulkRemoveFromTopicReputerWhitelist_Handler,
		},
		{
			MethodName: "EnableTopicWorkerWhitelist",
			Handler:    _MsgService_EnableTopicWorkerWhitelist_Handler,
		},
		{
			MethodName: "DisableTopicWorkerWhitelist",
			Handler:    _MsgService_DisableTopicWorkerWhitelist_Handler,
		},
		{
			MethodName: "EnableTopicReputerWhitelist",
			Handler:    _MsgService_EnableTopicReputerWhitelist_Handler,
		},
		{
			MethodName: "DisableTopicReputerWhitelist",
			Handler:    _MsgService_DisableTopicReputerWhitelist_Handler,
		},
		{
			MethodName: "AddToTopicCreatorWhitelist",
			Handler:    _MsgService_AddToTopicCreatorWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromTopicCreatorWhitelist",
			Handler:    _MsgService_RemoveFromTopicCreatorWhitelist_Handler,
		},
		{
			MethodName: "AddToTopicWorkerWhitelist",
			Handler:    _MsgService_AddToTopicWorkerWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromTopicWorkerWhitelist",
			Handler:    _MsgService_RemoveFromTopicWorkerWhitelist_Handler,
		},
		{
			MethodName: "AddToTopicReputerWhitelist",
			Handler:    _MsgService_AddToTopicReputerWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromTopicReputerWhitelist",
			Handler:    _MsgService_RemoveFromTopicReputerWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/v7/tx.proto",
}
